#include <stdio.h>
#include <stdlib.h>

// Структура узла дерева
typedef struct Node {
	int data;
	struct Node* left;
	struct Node* right;
} Node;

// Функция создания нового узла дерева
Node* createNode(int data) {
	Node* newNode = (Node*)malloc(sizeof(Node));
	if (!newNode) {
		printf("Memory allocation error\n");
		return NULL;
	}
	newNode->data = data;
	newNode->left = newNode->right = NULL;
	return newNode;
}

// Функция поиска минимального элемента в дереве
int findMin(Node* node) {
	if (node == NULL) {
		printf("The tree is empty\n");
		return -1;
	}
	while (node->left!= NULL) {
		node = node->left;
	}
	return node->data;
}

// Функция поиска максимального элемента в дереве
int findMax(Node* node) {
	if (node == NULL) {
		printf("The tree is empty\n");
		return -1;
	}
	while (node->right!= NULL) {
		node = node->right;
	}
	return node->data;
}

int main() {
	// Создание дерева
	Node* root = createNode(10);
	root->left = createNode(5);
	root->right = createNode(15);
	root->left->left = createNode(3);
	root->left->right = createNode(7);
	root->right->left = createNode(13);
	root->right->right = createNode(18);
	root->left->left->left = createNode(1);
	root->left->right->left = createNode(6);

	// Поиск разницы между максимальным и минимальным элементом
	printf("%d", findMax(root) - findMin(root));

	return 0;
}
